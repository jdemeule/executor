config("extra_warnings") {
  cflags = [
    "-Wall",
    # "-Wextra",
  ]
  if (is_clang) {
    # cflags += [
    #   "-Weverything",
    #   "-Wno-c++98-compat-pedantic",
    #   "-Wno-c++98-compat",
    #   "-Wno-disabled-macro-expansion",
    #   "-Wno-gnu-include-next",
    #   "-Wno-gnu-statement-expression",
    #   "-Wno-gnu-zero-variadic-macro-arguments",
    #   "-Wno-padded",
    #   "-Wno-reserved-id-macro",
    # ]
  }
}
config("no_exceptions") {
  cflags_cc = [ "-fno-exceptions" ]
}
config("no_rtti") {
  cflags_cc = [ "-fno-rtti" ]
}
config("c++11") {
  cflags_cc = [ "-std=c++11" ]
}
# This is needed to compile libunwindstack.
config("c++17") {
  cflags_cc = [ "-std=c++17" ]
}
config("visibility_hidden") {
  cflags = [ "-fvisibility=hidden" ]
}

config("default") {
  asmflags = []
  cflags = []
  cflags_c = []
  cflags_cc = []
  defines = []
  ldflags = []
  libs = []
  cflags += [
    "-fPIC",
    "-g",
    "-Wformat",
  ]
  if (is_clang) {
    cflags += [
      # Color compiler output, see https://github.com/ninja-build/ninja/wiki/FAQ
      "-fcolor-diagnostics",
      "-fdiagnostics-show-template-tree",
      "-stdlib=libc++",
    ]
  }
  if (is_lto) {
    cflags += [ "-flto=full" ]
    ldflags += [ "-flto=full" ]
  }
  if (current_cpu == "x86") {
    asmflags += [ "-m32" ]
    cflags += [
      "-m32",
      "-msse2",
      "-mfpmath=sse",
    ]
    ldflags += [ "-m32" ]
  }
  if (is_linux) {
    libs += [
      "pthread",
      "rt",
    ]
  }
}

config("debug_symbols") {
  cflags = [ "-O0" ]
  if (is_android || is_linux) {
    cflags += [ "-funwind-tables" ]
  }
}

config("release") {
  cflags = [
    "-fdata-sections",
    "-ffunction-sections",
  ]
  if (is_android) {
    cflags += [ "-Oz" ]
#  } else if (use_libfuzzer) {
#    cflags += [ "-O1" ]
  } else {
    cflags += [ "-O3" ]
  }
  if (is_mac) {
    ldflags = [ "-dead_strip" ]
  } else {
    ldflags = [
      "-fuse-ld=gold",
      "-Wl,--gc-sections",
      "-Wl,--icf=all",
      "-Wl,-O1",
    ]
  }
  defines = [ "NDEBUG" ]
}

config("shared_library") {
  if (is_android || is_linux) {
    ldflags = [ "-fPIC" ]
  }
}

config("executable") {
  ldflags = []
  # Android will refuse to run executables if they aren't position independent.
  # Instead on Linux there isn't any need and they break ASan (goo.gl/paFR6K).
  if (is_android) {
    asmflags = [ "-fPIE" ]
    cflags = [ "-fPIE" ]
    ldflags += [ "-pie" ]
  }
  # -rpath stores the path to the linked shared libraries into the binary, so
  # that they can be launched without passing any LD_LIBRARY_PATH. It's
  # supported only by Linux, not Android. But concretely we need this only when
  # use_custom_libcxx=true && custom_libcxx_is_static=false, which happens only
  # on Linux right now.
  if (is_linux) {
    ldflags += [
      "-Wl,-rpath=\$ORIGIN/.",
      "-Wl,-rpath-link=.",
    ]
  }
}


config("compiler_defaults") {
  if (current_os == "linux") {
    cflags = [
      "-fPIC",
      "-pthread",
    ]
  }
}

config("executable_ldconfig") {
#  ldflags = [
#    "-Wl,-rpath=\$ORIGIN/",
#    "-Wl,-rpath-link=",
#  ]
}
